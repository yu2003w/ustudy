<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ustudy.exam.mapper.AnalysisMapper">

	<resultMap type="com.ustudy.exam.model.analysis.ExamBrifeAnaly" id="ExamBrifAnaly">
	  <result property="examName" column="examName"/>
	  <result property="schoolDetails" column="schoolDetails"/>
	</resultMap>

	<resultMap type="com.ustudy.exam.model.analysis.EgsScoreAnaly" id="EgsScoreAnaly">
	  <result property="exCount" column="exCount"/>
	  <result property="maxScore" column="maxScore"/>
	  <result property="minScore" column="minScore"/>
	  <result property="aveScore" column="aveScore"/>
	  <result property="midScore" column="midScore"/>
	  <result property="aggrscore" column="aggrscore"/>
	</resultMap>

	<resultMap type="com.ustudy.exam.model.analysis.QuesObjScoreAnaly" id="QuesObjScoreAnaly">
	  <result property="quesno" column="quesno"/>
	  <result property="score" column="score"/>
	  <result property="aveScore" column="aveScore"/>
	  <result property="total" column="total"/>
	  <result property="opts" column="opts"/>
	  <result property="refa" column="refa"/>
	</resultMap>

	<resultMap type="com.ustudy.exam.model.analysis.QuesSubScoreAnaly" id="QuesSubScoreAnaly">
	  <result property="quesname" column="quesname"/>
	  <result property="score" column="fscore"/>
	  <result property="aveScore" column="aveScore"/>
	  <result property="aggrscore" column="aggrscore"/>
 	</resultMap>

	<select id="getExamBrifeList" parameterType="String" resultMap="ExamBrifAnaly">
		SELECT id, examName, GROUP_CONCAT(schname, ';', grs) AS schoolDetails FROM 
		(SELECT id, examName, schname, GROUP_CONCAT(grade_name, '-', classes_num, ':', clsinfo, ':', subs 
		SEPARATOR '#') AS grs FROM (SELECT exam.id, exam.exam_name AS examName, school.schid, school.schname, 
		grade.grade_name, GROUP_CONCAT(DISTINCT class.id, '-', class.cls_name SEPARATOR '@') AS clsinfo, 
		grade.classes_num, GROUP_CONCAT(DISTINCT egs.id, '-', subject.name SEPARATOR '@') AS subs FROM exam 
		LEFT JOIN examgradesub AS egs ON egs.examid = exam.id 
		LEFT JOIN grade ON grade.id = egs.grade_id 
		LEFT JOIN class ON class.grade_id = grade.id 
		LEFT JOIN subject ON egs.sub_id = subject.id 
		LEFT JOIN examschool ON examschool.examid = exam.id 
		LEFT JOIN school ON examschool.schid = school.schid 
		WHERE examschool.schid = #{orgid} GROUP BY exam.id , egs.grade_id) gsub 
		GROUP BY id , schid) ggr GROUP BY id
	</select>
	
	<select id="calEgsScoreRepport" parameterType="long" resultMap="EgsScoreAnaly">
	  SELECT COUNT(*) AS exCount, TRUNCATE(AVG(score), 1) AS aveScore, MAX(score) AS maxScore, MIN(score) AS minScore,
	  (SELECT score FROM (SELECT (@row:=@row + 1) AS row, score FROM (SELECT score, rank FROM ustudy.subscore 
	  LEFT JOIN examinee AS ee ON ee.id = subscore.stuid WHERE exam_grade_sub_id = #{egsid}
	  <if test="clsid > 0">
	  AND ee.class_id = #{clsid}
	  </if>
	  ORDER BY rank) tb1, (SELECT @row:=0) r) tb2 WHERE row = ((SELECT COUNT(*) AS total FROM subscore 
	  LEFT JOIN examinee AS ee ON ee.id = subscore.stuid WHERE exam_grade_sub_id = #{egsid}
	  <if test="clsid > 0">
	  AND ee.class_id = #{clsid}
	  </if>
	  ) DIV 2)) AS midscore, (SELECT COUNT(*) FROM subscore LEFT JOIN examinee AS ee ON ee.id = subscore.stuid 
	  WHERE score >= ((SELECT SUM(IF((question.type IN ('单选题' , '多选题', '判断题')), 
	  question.score * (question.endno - question.startno + 1), question.score)) AS fullscore FROM ustudy.question 
	  WHERE exam_grade_sub_id = #{egsid}) * 0.6) AND exam_grade_sub_id = #{egsid} 
	  <if test="clsid > 0">
	  AND ee.class_id = #{clsid}
	  </if>
	  ) AS passCount, (SELECT GROUP_CONCAT(num, '-', score) FROM (SELECT COUNT(*) AS num, score FROM subscore 
	  LEFT JOIN examinee AS ee ON ee.id = subscore.stuid WHERE exam_grade_sub_id = #{egsid} 
	  <if test="clsid > 0">
	  AND ee.class_id = #{clsid}
	  </if>
	  GROUP BY score) scores) AS aggrscore FROM subscore LEFT JOIN examinee AS ee ON ee.id = subscore.stuid 
	  WHERE exam_grade_sub_id = #{egsid} 
	  <if test="clsid > 0">
	  AND ee.class_id = #{clsid}
	  </if>
	</select>
	
	<select id="calQuesObjReport" parameterType="long" resultMap="QuesObjScoreAnaly">
	  select tb1.quesno, score, truncate((sum(ss)/sum(num)), 1) as aveScore, sum(num) as total, 
	  group_concat(tb1.answer, '-', num) opts, refa from 
	  (select obj_answer.quesno, question.score, sum(obj_answer.score) as ss, obj_answer.answer, 
	  count(obj_answer.answer) as num, question.id as quesid, refanswer.answer as refa from obj_answer 
	  left join paper on obj_answer.paperid = paper.id 
	  left join examgradesub as egs on paper.exam_grade_sub_id = egs.id 
	  left join question on (question.exam_grade_sub_id = egs.id and obj_answer.quesno >= question.startno and question.endno >= obj_answer.quesno) 
	  left join refanswer on (refanswer.quesid = question.id and refanswer.quesno = obj_answer.quesno) 
	  left join examinee as ee on ee.exam_code = paper.exam_code 
	  where egs.id = #{egsid} 
	  <if test="clsid > 0">
	  and ee.class_id = #{clsid}
	  </if> 
	  group by quesno, question.id, obj_answer.answer) tb1 group by tb1.quesno, tb1.quesid
	</select>
	
	<select id="calQuesSubReport" parameterType="long" resultMap="QuesSubScoreAnaly">
	  (select tb1.quesname, tb1.fscore, tb2.aveScore, group_concat(tb1.score, '-', tb1.num) as aggrscore from 
	  (select question.quesno as quesname, question.score as fscore, count(ans.score) as num, ans.score from answer as ans 
	  left join paper on ans.paperid = paper.id 
	  left join examgradesub as egs on paper.exam_grade_sub_id = egs.id 
	  left join question on (question.exam_grade_sub_id = egs.id and question.id = ans.quesid) 
      left join examinee as ee on ee.exam_code = paper.exam_code 
      where egs.id = #{egsid} 
	  <if test="clsid > 0">
	  and ee.class_id = #{clsid}
	  </if> 
	  and question.quesno > 0 group by question.quesno, question.score, ans.score order by question.quesno) tb1 
	  left join (select question.quesno as quesname, truncate(avg(ans.score), 1) as aveScore from answer as ans 
	  left join paper on ans.paperid = paper.id 
	  left join examgradesub as egs on paper.exam_grade_sub_id = egs.id 
	  left join question on (question.exam_grade_sub_id = egs.id and question.id = ans.quesid) 
      left join examinee as ee on ee.exam_code = paper.exam_code 
      where egs.id = #{egsid} 
	  <if test="clsid > 0">
	  and ee.class_id = #{clsid}
	  </if> 
	  and question.quesno > 0 group by question.quesno order by question.quesno) tb2 
	  on tb1.quesname = tb2.quesname group by quesname, fscore, aveScore) 
	  union (select tb1.quesname, tb1.fscore, tb2.aveScore, group_concat(tb1.num, '-', score) as aggrscore from 
	  (select quest.quesno as quesname, quest.score as fscore, count(anst.score) as num, anst.score from answer_step as anst 
	  left join answer as ans on anst.answer_id = ans.id 
	  left join paper on ans.paperid = paper.id 
	  left join examgradesub as egs on paper.exam_grade_sub_id = egs.id 
	  left join question on (question.exam_grade_sub_id = egs.id and question.id = ans.quesid) 
	  left join question_step as quest on (quest.quesid = question.id and quest.quesno = anst.quesno) 
      left join examinee as ee on ee.exam_code = paper.exam_code 
      where egs.id = #{egsid} 
	  <if test="clsid > 0">
	  and ee.class_id = #{clsid}
	  </if> and question.quesno = 0 group by quest.quesno,fscore, anst.score order by quest.quesno) tb1 
	  left join (select quest.quesno as quesname, truncate(avg(anst.score),1) as aveScore from answer_step as anst 
	  left join answer as ans on anst.answer_id = ans.id 
	  left join paper on ans.paperid = paper.id 
	  left join examgradesub as egs on paper.exam_grade_sub_id = egs.id 
	  left join question on (question.exam_grade_sub_id = egs.id and question.id = ans.quesid) 
	  left join question_step as quest on (quest.quesid = question.id and quest.quesno = anst.quesno) 
      left join examinee as ee on ee.exam_code = paper.exam_code 
      where egs.id = #{egsid} 
	  <if test="clsid > 0">
	  and ee.class_id = #{clsid}
	  </if> and question.quesno = 0 group by quest.quesno order by quest.quesno) tb2 
	  on tb1.quesname = tb2.quesname group by quesname, fscore, aveScore) order by cast(quesname as DECIMAL)
	</select>

</mapper>
