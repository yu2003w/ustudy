<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ustudy.exam.dao.ExameeScoreDao">

    <resultMap type="com.ustudy.exam.model.score.StudentScore" id="StudentScore">
        <result property="exameeId" column="exameeId"/>
        <result property="exameeNO" column="exameeNO"/>
        <result property="examId" column="examId"/>
        <result property="exameeName" column="exameeName"/>
        <result property="schName" column="schName"/>
        <result property="className" column="className"/>
        <result property="score" column="score"/>
	    <result property="rank" column="rank"/>
	</resultMap>

    <resultMap type="com.ustudy.exam.model.score.ExameeScore" id="ExameeScore">
        <result property="id" column="id"/>
        <result property="stuid" column="stuid"/>
        <result property="examId" column="examid"/>
        <result property="score" column="score"/>
	    <result property="rank" column="rank"/>
	</resultMap>
	
	<insert id="insertExameeScores" useGeneratedKeys="true" keyProperty="id" parameterType="java.util.List">
		insert into exameescore (examee_id,exam_id,score,rank) values  
	    <foreach collection="list" item="item" index="index" separator="," >  
	        (#{item.stuid},#{item.examId},#{item.score},#{item.rank})  
	    </foreach>
	    on duplicate key update score = score, rank = rank
	</insert>
	
	<select id="getExameeScores" parameterType="java.util.Map" resultMap="StudentScore">
		select ee.id as exameeId, ee.exam_code as exameeNO, ee.examid as examId, ee.name as exameeName, 
		school.schname as schName, class.cls_name as className, escore.score, escore.rank, 
        group_concat(subject.name, "-", subscore.score, "-", subscore.rank, ";", 
        coalesce((select group_concat(subject.name, "-", scs.score, "-", scs.rank separator ':') from subchildscore as scs 
        join subject on subject.id = scs.sub_id where scs.parent_id = subscore.id order by scs.sub_id), 'NULL') ORDER BY subject.name) 
        as aggrscore from examinee as ee 
        left join exameescore as escore on (ee.id = escore.examee_id and ee.examid = escore.exam_id) 
        left join school on school.schid = ee.schid 
        left join class on class.id = ee.class_id 
        left join subscore on subscore.stuid = ee.id 
        join examgradesub as egs on egs.id = subscore.exam_grade_sub_id 
        join subject on subject.id = egs.sub_id
        where ee.examid = #{examId} 
		<if test="schId !=null and schId > 0">
			AND ee.schid=#{schId}
		</if>
		<if test="gradeId !=null and gradeId > 0">
			AND ee.gradeid=#{gradeId}
		</if>
		<if test="classId !=null and classId > 0">
			AND ee.class_id=#{classId}
		</if>
		<if test="text !=null and text != ''">
			AND (ee.name LIKE CONCAT('%',#{text, jdbcType=VARCHAR},'%') OR ee.exam_code LIKE CONCAT('%',#{text, jdbcType=VARCHAR},'%')) 
		</if>
		<if test="branch !=null and branch != ''">
			AND class.cls_type=#{branch, jdbcType=VARCHAR}
		</if>
		group by ee.id ORDER BY ee.exam_code
	</select>
	
	<select id="getExamineeGrp" resultType="java.lang.String">
	    SELECT distinct subs FROM ustudy.examinee where examid = #{examid}
	</select>
	
	<select id="calExameeScore" resultMap="ExameeScore">
		SELECT subscore.stuid, egs.examid, sum(subscore.score) as score FROM ustudy.subscore 
		left join examgradesub as egs on egs.id = subscore.exam_grade_sub_id 
		left join examinee as ee on ee.id = subscore.stuid 
		where egs.examid = #{examid} 
		<if test="gid > 0">
		and egs.grade_id = #{gid}
		</if>
		and ee.subs = cast(#{subs} as JSON) group by stuid
	</select>

</mapper>