<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc
           http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.1.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx.xsd
           http://www.springframework.org/schema/util
           http://www.springframework.org/schema/util/spring-util.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop.xsd
           http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd">
      
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login.jsp"/>
        <property name="successUrl" value="/index.jsp"/>
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
        <property name="filters">
            <util:map>
                <entry key="authc">
                    <bean class="org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter"/>
                </entry>
            </util:map>
        </property>
        <property name="filterChainDefinitions">
            <value>
                <!-- Noted: some issues unresolved, that failed to start application if specifying 
                     multiple roles like "roles[admin,user]". Actually this is supported at least
                     in shiro.ini. To work around this, only using single roles or single permissions.
                -->
                <!-- school filter chain -->
                /school/view/** = authc, perms[school:view]
                /school/list/** = authc, perms[school:view]
                /school/add = authc, perms[school:edit]
                /school/update = authc, perms[school:edit]
                /school/delete = authc, perms[school:edit]
                /school/delete/** = authc, perms[school:edit]
                /school/list/brife/** = authc, perms[school:view]
                
                <!-- shool web page filter chain -->
                /schoolList = authc, perms[school:view]
 
                <!-- user filter chain -->
                /user/list/** = authc, perms[user:view]
                /user/view/** = authc, perms[user:view]
                /user/add = authc, perms[user:edit]
                /user/update/** = authc, perms[user:edit]
                /user/delete = authc, perms[user:edit]
                /user/delete/** = authc, perms[user:edit]
                
                <!-- user web page filter chain -->
                /userList = authc, perms[user:view]

                <!-- OrgOwner filter chain -->
                /owner/list/** = authc, perms[orgowner:view]
                /owner/view/** = authc, perms[orgowner:view]
                /owner/add = authc, perms[orgowner:edit]
                /owner/update/** = authc, perms[orgowner:edit]
                /owner/delete = authc, perms[orgowner:edit]
                /owner/delete/** = authc, perms[orgowner:edit]
                
                <!-- OrgOwner web page filter chain -->
                /ownerList = authc, perms[orgowner:view]
             
                /** = anon
            </value>
        </property>
    </bean>

    <bean id="adminboard" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">  
        <property name="poolProperties">  
            <bean class="org.apache.tomcat.jdbc.pool.PoolProperties">  
                <property name="url" value="jdbc:mysql://localhost:13306/ustudy?characterEncoding=UTF-8&amp;serverTimezone=UTC"/>
                <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
                <property name="username" value="root"/>  
                <property name="password" value="mysql"/>
                <property name="testWhileIdle" value="true"/>  
                <property name="testOnBorrow" value="true"/>  
                <property name="validationInterval" value="60000"/>  
                <property name="testOnReturn" value="false"/>  
                <property name="validationQuery" value="/* ping */"/>  
                <property name="timeBetweenEvictionRunsMillis" value="30000"/>  
                <property name="maxActive" value="100"/>  
                <property name="initialSize" value="10"/>  
                <property name="maxWait" value="10000"/>
                <!--
                <property name="removeAbandonedTimeout" value="60"/>  
                <property name="minEvictableIdleTimeMillis" value="30000"/>  
                <property name="minIdle" value="10"/>
                <property name="logAbandoned" value="true"/>
                <property name="removeAbandoned" value="true"/>  
                <property name="jdbcInterceptors" value="org.apache.tomcat.jdbc.pool.interceptor.ConnectionState;org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer"/>
                -->
            </bean>  
        </property>  
    </bean>
    
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
        <property name="realm" ref="adminRealm"/>
        <!-- By default the servlet container sessions will be used.  Uncomment this line
           to use shiro's native sessions (see the JavaDoc for more): -->
        <!-- <property name="sessionMode" value="native"/> -->
    </bean>
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->
    <!-- security datasource: -->
    <bean id="adminRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm">
        <property name="dataSource" ref="adminboard" />
        <property name="permissionsLookupEnabled" value="true"/>
        <property name="authenticationQuery" value="select passwd from ustudy.users where loginname = ?" />
        <property name="userRolesQuery" value="select name from ustudy.roles join ustudy.rolevalue on roles.role_id = rolevalue.id where user_name = ?" />
        <property name="permissionsQuery" value="select perm from ustudy.perms where role_name = ?"/>
    </bean>
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
        <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
    
    <!-- Secure Spring remoting:  Ensure any Spring Remoting method invocations
         can be associated with a Subject for security checks. -->
    <bean id="secureRemoteInvocationExecutor" class="org.apache.shiro.spring.remoting.SecureRemoteInvocationExecutor">
         <property name="securityManager" ref="securityManager"/>
    </bean>
    
    <!-- 
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="schoolServiceOperation"
             expression="execution(* com.ustudy.dashboard.services.SchoolServiceImp.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="schoolServiceOperation"/>
    </aop:config>
    -->
    
    <!-- Noted: Two methods for enabling spring transaction managent with jdbc.
         Above is XML based configuration. Declaring with @Transactional in java
         source code is also very flexible. -->
    <tx:annotation-driven transaction-manager="txManager"/>
    <bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="adminboard" />
	</bean>
	
	<!-- sql session factory for mybatis -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
       <property name="dataSource" ref="adminboard" />
    </bean>
    
    <!-- scan for mappers and make them autowired -->
    <mybatis:scan base-package="com.ustudy.dashboard.mapper" />
    
    <!-- spring data redis related configurations -->
	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		p:use-pool="true" p:database="0" p:host-name="localhost" p:port="6380"
		p:timeout="100" />

	<context:annotation-config />
	<bean
		class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration" />
		
</beans>
