# create table for score analytics
set names utf8;
create table if not exists ustudy.subscore (
id INT NOT NULL AUTO_INCREMENT,
stuid INT NOT NULL COMMENT '考生ID',
exam_grade_sub_id INT NOT NULL COMMENT '考试科目',
score float(4,1) DEFAULT '0.0' COMMENT '总分数',
mark_img varchar(128),
sub_score float(4,1) DEFAULT '0.0' COMMENT '主观题分数',
obj_score float(4,1) DEFAULT '0.0' COMMENT '客观题分数',
rank INT DEFAULT '0' COMMENT '排名',
PRIMARY KEY(id),
UNIQUE KEY (stuid, exam_grade_sub_id),
INDEX (rank),
FOREIGN KEY (stuid)
    REFERENCES ustudy.examinee(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (exam_grade_sub_id)
    REFERENCES ustudy.examgradesub(id)
    ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB;

create table if not exists ustudy.subchildscore (
id INT NOT NULL AUTO_INCREMENT,
# id of subscore
parent_id INT NOT NULL,
# child subject id
sub_id INT NOT NULL COMMENT '分科科目id',
score float(4,1) DEFAULT '0.0' COMMENT '总分数',
rank INT DEFAULT '0' COMMENT '排名',
PRIMARY KEY(id),
UNIQUE KEY (parent_id, sub_id),
INDEX (rank),
FOREIGN KEY (sub_id)
    REFERENCES ustudy.subject(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (parent_id)
    REFERENCES ustudy.subscore(id)
    ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB;

# store total score and rank information for student in one examination
create table if not exists ustudy.exameescore (
id INT NOT NULL AUTO_INCREMENT,
examee_id INT NOT NULL,
exam_id INT NOT NULL,
score float(4,1) DEFAULT 0,
rank INT (11) DEFAULT 0,
PRIMARY KEY(id),
INDEX (rank),
UNIQUE KEY(examee_id, exam_id),
FOREIGN KEY(examee_id)
    REFERENCES ustudy.examinee(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY(exam_id)
    REFERENCES ustudy.exam(id)
    ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB;

# total score information for class in one examination
create table if not exists ustudy.scoreclass (
id INT NOT NULL AUTO_INCREMENT,
cls_id INT NOT NULL,
exam_id INT NOT NULL,
ave_score float(4,1) DEFAULT 0 COMMENT 'average score for class',
rank INT DEFAULT 0 COMMENT 'rank in grade',
PRIMARY KEY(id),
UNIQUE KET(cls_id, exam_id),
INDEX (rank),
FOREIGN KEY(cls_id)
    REFERENCES ustudy.class(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY(exam_id)
    REFERENCES ustudy.exam(id)
    ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB;

# subject score inforamtion for class in one examination
create table if not exists ustudy.scoreclssubject (
id INT NOT NULL AUTO_INCREMENT,
cls_id INT NOT NULL,
egs_id INT NOT NULL,
ave_score float(4,1) DEFAULT 0,
rank INT default 0,
PRIMARY KEY(id),
UNIQUE KET(cls_id, egs_id),
INDEX (rank),
FOREIGN KEY(cls_id)
    REFERENCES ustudy.class(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY(egs_id)
    REFERENCES ustudy.examgradesub(id)
    ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB;
